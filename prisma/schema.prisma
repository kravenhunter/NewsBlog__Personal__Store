generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String  @id
  type          String
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  id_token      String?
  session_state String?
  userId        String  @unique
  User          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  hashedPassword   String?
  createdAt        DateTime          @default(now())
  updateddAt       DateTime          @default(now())
  Account          Account?
  Session          Session?
  Comment          Comment?
  User_Credentials User_Credentials?
}

model User_Credentials {
  id             String    @id @default(cuid())
  date           DateTime  @default(now())
  accessPanel    Boolean
  userNameField  String
  adressField    String?
  emailField     String
  avatar         File?
  birthdayField  DateTime?
  firstNameField String?
  lastNameField  String?
  phoneField     String?
  genderField    Gender
  userId         String    @unique
  User           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  Male
  Female
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id               String            @id @default(cuid())
  create_at        DateTime          @default(now())
  update_at        DateTime?
  title            String
  file_type        FileType
  file_binary      String            @db.MediumText
  adition_binary   String?           @db.MediumText
  description      String?
  credentialsId    String?           @unique
  User_Credentials User_Credentials? @relation(fields: [credentialsId], references: [id], onDelete: Cascade)
  advertise_Id     String?           @unique
  Advertise        Advertise?        @relation(fields: [advertise_Id], references: [id], onDelete: Cascade)
  imageBg_Id       String?           @unique
  ImageBg          Post?             @relation(name: "imageBg", fields: [imageBg_Id], references: [id], onDelete: Cascade)
  imagePrev_Id     String?           @unique
  ImagePrev        Post?             @relation(name: "imagePrev", fields: [imagePrev_Id], references: [id], onDelete: Cascade)
  tagId            String?
  tag              Tag?              @relation(fields: [tagId], references: [id])
}

enum FileType {
  Image
  Audio
}

model Post {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  title     String
  author    String
  body      String  @db.Text
  imageBg   File?    @relation(name: "imageBg")
  imagePrev File?    @relation(name: "imagePrev")
  shortBody String    @db.Text
  tags      Tag[]

  Comment   Comment[]
  CommentId String?
}

model Tag {
  id    String   @id @default(cuid())
  date  DateTime @default(now())
  title String
  Posts Post[]
  File  File[]
}

model Comment {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  body          String
  postId        String   @unique
  Posts         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId        String?  @unique
  Author        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  anonumousName String?  @unique
}

model About {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  title       String
  description String  @db.Text
}

model Advertise {
  id     String   @id @default(cuid())
  date   DateTime @default(now())
  name   String
  source File?
}

model Contacts {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  adress    String
  copyright String
  email     String
  phone     String
  Socials   Social[]
  // facebookLink String
  // instagram    String
  // twetter      String
  // vkontakte    String
  // youtube      String
}

model Social {
  id        String    @id @default(cuid())
  date      DateTime  @default(now())
  title     String
  link      String
  contactId String?   @unique
  Contacts  Contacts? @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model FooterLink {
  id    String   @id @default(cuid())
  date  DateTime @default(now())
  title String
  path  String?
}

model Navigation {
  id    String   @id @default(cuid())
  date  DateTime @default(now())
  title String
  path  String?
}
